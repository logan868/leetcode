Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

 

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.

解题思路：通过指向指针的指针来改变原指向


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode** pp = &head,*a,*b;
        while((a = *pp) && (b = a->next))
        {
            a->next = b->next;
            b->next = a;
            *pp = b;  //第一轮：让原来的head指向b 第二轮：让原来的第一个节点指向第四个节点
            
            pp = &(a->next);
        }
        return head;
        
    }
};


方法二：使用一个虚拟的头节点
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        auto dummy=new ListNode(-1);
        dummy->next=head;
        for(auto p=dummy;p->next&&p->next->next;){
            auto a=p->next,b=a->next;
            p->next=b;
            a->next=b->next;
            b->next=a;
            p=a;
        }
        return dummy->next;
    }
};




